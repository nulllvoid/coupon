import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("application-conventions")
    id("jacoco")
    id("org.sonarqube") version "3.3"
}

group = "com.nullvoid.coupon.api"
version = "1.0.0"

repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {

    implementation("com.h2database:h2")
    kapt("io.micronaut:micronaut-http-validation")
    kapt("io.micronaut.data:micronaut-data-processor:3.5.0")
    kapt('io.micronaut.openapi:micronaut-openapi:4.0.1')
    kapt("org.mapstruct:mapstruct-processor:1.5.0.RC1")

    implementation("org.mybatis:mybatis:3.5.10")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation('io.micronaut:micronaut-jackson-databind:3.4.3')
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.aot:micronaut-aot-api:1.1.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1")
    implementation("jakarta.persistence:jakarta.persistence-api:2.2.3")
    implementation("org.mapstruct:mapstruct:1.5.0.RC1")

    implementation("org.json:json:20220320")

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2")

    // Import model subproject
    implementation(project(":model"))

    implementation("io.swagger.core.v3:swagger-annotations")

    //Database
    implementation('io.micronaut.sql:micronaut-jdbc-hikari:4.3.0')
    implementation("io.r2dbc:r2dbc-postgresql:0.8.12.RELEASE")
    runtimeOnly("org.postgresql:postgresql")
    implementation("io.micronaut.data:micronaut-data-r2dbc:3.5.0")

    // Sentry
    implementation("io.sentry:sentry:6.4.0")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.2")

    compileOnly("org.graalvm.nativeimage:svm")

    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test")
    testImplementation("org.junit.jupiter:junit-jupiter-params")

    // Tracing instrumentation libraries
    implementation("io.micronaut:micronaut-tracing:3.3.0-M1")
    runtimeOnly("io.jaegertracing:jaeger-thrift:1.8.1")

    implementation("io.micronaut.serde:micronaut-serde-jackson")
}

sonarqube {
    properties {
        property("sonar.projectKey", "Coupon")
        property("sonar.projectName", "Coupon")
    }
}


application {
    mainClass.set("com.nulllvoid.coupon.api.ApplicationKt")
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.nulllvoid.coupon.api.*")
    }
    aot {
        optimizeServiceLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
    }
}

tasks.withType(ShadowJar) {
    setZip64(true)
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}
